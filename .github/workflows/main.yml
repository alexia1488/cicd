# Название workflow, отражающее расширенную функциональность
name: Docker Build and Push with Code Checks

# Определяем события, запускающие workflow
on:
  push:
    branches: [main]

jobs:
  # Первый job отвечает за все проверки качества кода
  # Эти проверки выполняются перед сборкой и публикацией образа
  code-quality:
    runs-on: ubuntu-latest
    steps:
      # Загружаем код из репозитория
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Устанавливаем нужную версию Python, соответствующую Dockerfile
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      # Устанавливаем инструменты для проверки кода
      # flake8 - для быстрого обнаружения синтаксических ошибок
      # pylint - для более глубокого анализа кода
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint
      
      # Выполняем проверку кода Python с помощью двух линтеров
      # flake8 проверяет основные синтаксические ошибки и стиль кода
      # pylint выполняет более глубокий анализ на наличие ошибок и предупреждений
      - name: Lint Python code
        run: |
          flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics
          pylint app.py --disable=all --enable=E,F,W
      
      # Проверяем синтаксис Python кода через компиляцию
      # Это позволяет обнаружить синтаксические ошибки до запуска
      - name: Check Python syntax
        run: python -m py_compile app.py
      
      # Устанавливаем специализированный инструмент для проверки Dockerfile
      # Hadolint анализирует Dockerfile на соответствие лучшим практикам
      - name: Install Hadolint
        run: |
          wget -q https://github.com/hadolint/hadolint/releases/download/v2.10.0/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          mv hadolint-Linux-x86_64 /usr/local/bin/hadolint
      
      # Проверяем Dockerfile на ошибки и несоответствия лучшим практикам
      - name: Lint Dockerfile
        run: hadolint Dockerfile
      
      # Тестируем запуск приложения для проверки работоспособности
      # Это обеспечивает базовое тестирование приложения перед сборкой образа
      - name: Test application execution
        run: python app.py
  
  # Второй job выполняет сборку и публикацию Docker-образа
  # Запускается только после успешного завершения проверок кода
  build:
    # Зависимость от job code-quality гарантирует, что сборка начнется
    # только после успешного прохождения всех проверок
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Авторизация в Docker Hub с использованием секретов репозитория
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Сборка Docker-образа и его публикация в Docker Hub
      # Происходит только если все предыдущие проверки были успешны
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cicd:latest
